# -*- coding: utf-8 -*-
"""Untitled47.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wZGAYzn2SZYNP8Uazy_TMvP0wD_GLkeV
"""

import numpy as np
import pandas as pd
pd.set_option('display.max_columns', 12)
pd.set_option('display.width', 200)

class Poker_5:
  def __init__(self,INITIAL_STACK=100,NUM_PLAYERS=2, BLINDS = [1.0,2.0], num_rounds=4, debug=False, single_hand=False, random_start = False, use_conv = -1):
    self.deck = [1,2,3,4,5,6,7,8,9]

    
    self.num_players = NUM_PLAYERS
    self.initial_put = 0
    self.random_start = random_start
    if self.random_start:
      s1 = int(np.random.uniform(low = int(INITIAL_STACK*0.4), high =int(INITIAL_STACK*3.6)))/2
      self.initial_stacks = np.array([s1, INITIAL_STACK * 2 - s1])
    else:
      self.initial_stacks = np.array([INITIAL_STACK for i in range(self.num_players)],dtype=float)
    
    self.initial_options = np.array([1 for i in range(self.num_players)],dtype=float)
    self.intial_put_cont = np.array([0 for i in range(self.num_players)],dtype=float)
    self.log=[]
    self.cards=[]
    self.dealer_odds = [0.5,0.5]
    self.initial_dealer=np.random.choice([0,1], p= self.dealer_odds)
    # self.initial_dealer = 0
    self.blinds=BLINDS
    self.last_bet = 0
    self.stage_list=['ppf','pf','d']
    self.cards = np.array([0,0])
    self.player0_options = [0,0,0,0,0,0,0]
    self.player1_options = [0,0,0,0,0,0,0]
    self.last_actor=-99
    self.player_all_in=0
    self.num_rounds = num_rounds
    self.rond = 1
    # self.turn = -1
    self.agent_id = None

    self.com_card = [0]*(self.num_rounds-1)
    self.com_card_shown = 0

    #check, call, hput, put, oput, allin
    self.player0_hist = [[0,0,0,0,0,0] for i in range(self.num_rounds)]
    self.player1_hist = [[0,0,0,0,0,0] for i in range(self.num_rounds)]


    self.obs= {'blinds':self.blinds, 'stage':'ppf', 'dealer':self.initial_dealer, 'initial_stacks': self.initial_stacks.copy(), 'stacks':self.initial_stacks.copy(), 'cards':self.cards, 'put':self.initial_put,
               'options':self.player_all_in, 'put_contr':self.intial_put_cont, 'last_bet':self.last_bet, 'last_actor':self.last_actor, 
               'player0_options':self.player0_options,'player1_options':self.player1_options, 'agent_id':self.agent_id, 'num_rounds': self.num_rounds, 'rond':self.rond, 'com_card':self.com_card, 'com_card_shown': self.com_card_shown,
               'player_hist':[self.player0_hist, self.player1_hist] }
    self.disguise = ['cards']
    self.min_bet= self.blinds[1]
    self.i=0
    self.hand_start=1
    self.counter=0
    self.game_ended=0
    self.game_winner=-1
    self.debug=debug

    self.single_hand=single_hand
    self.hand_ended = 0
    self.rewards = np.array([0,0],dtype=float)
    self.last_action = np.array([0,0],dtype=float)
    self.folded=0
    
    self.use_conv = use_conv
##########################################################################################
  def check_options(self, agent_id):
    # options = (fold, check, call, hput, put, oput, all_in)
    options = np.array([0,0,0,0,0,0,0])

    # you can either check or fold.
    if self.obs['put_contr'][agent_id] == self.obs['put_contr'][1 - agent_id]:
      #adding check option
      options[1]=1
    elif self.obs['stacks'][agent_id] >=0 and self.obs['put_contr'][agent_id] < self.obs['put_contr'][1-agent_id]:
      options = np.array([1,0,0,0,0,0,0])
    if self.obs['stacks'][agent_id] >=  (self.obs['put_contr'][1 - agent_id] - self.obs['put_contr'][agent_id]):
      if self.obs['put_contr'][agent_id] < self.obs['put_contr'][1 - agent_id]:
        #adding call option
        options[2]=1
    if self.obs['stacks'][agent_id] >= (self.obs['put_contr'][1-agent_id] - self.obs['put_contr'][agent_id]) + self.blinds[1] and self.player_all_in == 0:
      #adding raise optionssss
        if self.obs['stacks'][agent_id] >= (self.obs['put_contr'][1-agent_id] - self.obs['put_contr'][agent_id])+1/2 *self.obs['put'] and 1/2 *self.obs['put'] >= 2 * self.blinds[1] and  self.obs['stacks'][1-agent_id] >= (self.obs['put_contr'][1-agent_id] - self.obs['put_contr'][agent_id])+1/2 *self.obs['put']:
          #adding 1/2put option
          options[3]=1
        if self.obs['stacks'][agent_id] >= (self.obs['put_contr'][1-agent_id] - self.obs['put_contr'][agent_id])+self.obs['put'] and  self.obs['stacks'][1-agent_id] >= (self.obs['put_contr'][1-agent_id] - self.obs['put_contr'][agent_id])+ self.obs['put']:
          #adding put option
          options[4]=1
        if self.obs['stacks'][agent_id] >= (self.obs['put_contr'][1-agent_id] - self.obs['put_contr'][agent_id])+1.5*self.obs['put'] and  self.obs['stacks'][1-agent_id] >= (self.obs['put_contr'][1-agent_id] - self.obs['put_contr'][agent_id])+ 1.5*self.obs['put']:
          #adding over option
          options[5]=1
    if self.obs['stacks'][agent_id] > 0  and self.player_all_in == 0:
      #adding all in option
      options[6]=1
    return options
##########################################################################################
  def update_obs(self, agent_id, action):

    # print("action was worth, ", action)
    self.obs['stacks'][agent_id] -= action
    if self.obs['stacks'][agent_id] == 0:
      self.player_all_in=1
    self.obs['put_contr'][agent_id] += action
    self.obs['put'] += action
    # if self.obs['']
    self.obs['last_bet']= self.obs['put_contr'][1 - agent_id] - self.obs['put_contr'][agent_id]

    self.last_action[1-agent_id] = 0
    self.last_action[agent_id] = -action
    if self.hand_start in [1,2,3]:
      self.last_action[agent_id] = 0
##########################################################################################
  def post_small_blind(self,agent_id):
    self.update_obs(agent_id, self.blinds[0])
    # print("{} posted sb, ".format(agent_id),  self.blinds[0], ' counter= ', self.counter)
    if self.debug: print("{} posted sb, ".format(agent_id),  self.blinds[0])

##########################################################################################
  def post_big_blind(self, agent_id):
    self.update_obs(agent_id, self.blinds[1])
    # print("{} posted BB, ".format(agent_id),  self.blinds[1], ' counter= ', self.counter)
    if self.debug: print("{} posted BB, ".format(agent_id),  self.blinds[1])

##########################################################################################
  def all_in(self, agent_id):

    amount = np.min([self.obs['stacks'][agent_id],self.obs['stacks'][1-agent_id] + self.obs['put_contr'][1-agent_id] - self.obs['put_contr'][agent_id] ])
    self.update_obs(agent_id,amount)
    self.player_all_in=1
    if self.debug: print("PLAYER {} ALL IN".format(agent_id))
##########################################################################################
  def comp_turn(self):
    if self.hand_start == 1:
      # self.rewards =  self.obs['stacks'] - self.obs['initial_stacks'] 
      self.obs['initial_stacks'] = self.obs['stacks'].copy()
    #   self.rewards = np.array([0,0],dtype=float)
      # if self.debug: print('rewards = ', self.rewards)

      self.player0_hist = [[0,0,0,0,0,0] for i in range(self.num_rounds)]
      self.player1_hist = [[0,0,0,0,0,0] for i in range(self.num_rounds)]
      self.obs['player_hist'] = [self.player0_hist, self.player1_hist]

      if self.single_hand:
        if self.hand_ended ==1:
          if self.debug: print("Hand OVER")
          self.game_ended=1
          return None

      self.obs['rond'] = 1
      self.hand_ended=0
      self.folded=0
      self.obs['com_card']=[0]*(self.num_rounds-1)
      self.obs['com_card_shown']=0
      self.deck_np = np.array(self.deck)
      np.random.shuffle(self.deck_np)
      self.deck_flop = np.array(self.deck)
      np.random.shuffle(self.deck_flop)
      

      self.counter+=1
      if self.debug: print('**************************NEW HAND, STACKS = ', self.obs['stacks'])
      if 0 in self.obs['stacks'] or 0.5 in self.obs['stacks'] or 0.25 in self.obs['stacks'] or 0.75 in self.obs['stacks']:
        winner = np.argmax(self.obs['stacks'])
        if self.debug: print("GAME OVER, PLAYER {} WON".format(winner))
        self.game_ended=1
        self.game_winner=winner
        return None
      self.hand_start = 2
      agent_id = self.obs['dealer']
      # self.obs['turn'] = agent_id
      if self.obs['stacks'][agent_id] > self.obs['blinds'][1]:
        self.post_small_blind(agent_id)
      else:
        self.all_in(agent_id)
        self.update_obs(1-agent_id, self.blinds[0])
        self.hand_start=3
      self.last_actor= agent_id
      return None

    if self.obs['rond'] == 1:  
      if self.hand_start == 2:
        self.counter+=1
        self.hand_start = 3
        agent_id = 1 - self.obs['dealer']
        # self.obs['turn'] = agent_id
        if self.player_all_in ==1:
          self.update_obs(agent_id, self.obs['put_contr'][1-agent_id])
          return None
        elif self.obs['stacks'][agent_id] > self.obs['blinds'][1]:
          self.post_big_blind(agent_id)
        else:
          self.all_in(agent_id)
        self.last_actor= agent_id
        return None
      
      if self.hand_start == 3:
        if self.player_all_in ==1:
          agent_id =self.obs['dealer']
          self.update_obs(agent_id, self.obs['put_contr'][1-agent_id] - self.obs['put_contr'][agent_id])
          self.counter+=1
          self.hand_start = -1
          self.obs['cards'] = self.deck_np[:2]
          return None
        else:
          self.counter+=1
          self.hand_start = 4
          self.obs['cards'] = self.deck_np[:2]
          # print('CARD DEALT= ', self.obs['cards'], ' counter= ', self.counter)
          ########FIX FOR HUMAN PLAYER
          if self.debug: print('CARD DEALT= ', self.obs['cards'])
          agent_id = np.argmin(self.obs['put_contr'])
          return agent_id


      if self.hand_start==4 and self.folded != 1:
        self.counter+=1    
        agent_id = 1 - self.obs['dealer']
        # self.obs['turn'] = agent_id
        self.last_actor = agent_id
        self.hand_start= -1
        return agent_id     

      if self.folded == 1:
        self.folded= 0
        agent_id = np.argmin(self.obs['put_contr'])
        self.fold(agent_id)
        return None

      if self.obs['put_contr'][0] !=  self.obs['put_contr'][1] and self.hand_start==-1:
        self.counter+=1    
        agent_id = np.argmin(self.obs['put_contr'])
        # self.obs['turn'] = agent_id
        self.last_actor = agent_id
        return agent_id

      if self.obs['put_contr'][0] ==  self.obs['put_contr'][1] and self.hand_start==-1 :
        self.counter+=1
        agent_id = 1 - self.obs['dealer']
        # self.obs['turn'] = agent_id
        self.hand_start=-1
        if self.obs['rond'] == self.obs['num_rounds']:
          self.decide()
          return None
        else:
          self.obs['rond']+=1
          self.hand_start = 10
          if self.debug and self.obs['rond'] <= self.obs['num_rounds']: print('going into rond ', self.obs['rond'])
          self.obs['com_card'][self.obs['rond']-2] = self.deck_flop[0]
          self.deck_flop = np.delete(self.deck_flop, [0])
          if self.debug: print('flop = ', self.obs['com_card'])
          self.obs['com_card_shown'] += 1
          return -1
      
    else:
      if self.obs['rond'] > self.obs['num_rounds']:
        self.decide()
        return None
      else:
        if self.folded == 1:
          self.folded= 0
          agent_id = np.argmin(self.obs['put_contr'])
          self.fold(agent_id)
          return None
        elif self.player_all_in==1 and self.obs['put_contr'][0] ==  self.obs['put_contr'][1]:
          self.hand_start = -1
          if self.obs['rond'] == self.obs['num_rounds']:
            self.decide()
            return None
          else:
            self.obs['rond']+=1
            self.hand_start = 10
            if self.debug and self.obs['rond'] <= self.obs['num_rounds']: print('going into rond ', self.obs['rond'])
            self.obs['com_card'][self.obs['rond']-2] = self.deck_flop[0]
            self.deck_flop = np.delete(self.deck_flop, [0])
            if self.debug: print('flop = ', self.obs['com_card'])
            self.obs['com_card_shown'] += 1
            return -1

        elif self.hand_start ==10:
          agent_id = self.obs['dealer']
          self.hand_start = 11
          return agent_id
        elif self.hand_start == 11:
          agent_id = 1- self.obs['dealer']
          self.hand_start = -1
          return agent_id
        elif self.obs['put_contr'][0] !=  self.obs['put_contr'][1]:
          agent_id = np.argmin(self.obs['put_contr'])
          # self.obs['turn'] = agent_id
          self.last_actor = agent_id
          return agent_id
        elif self.obs['put_contr'][0] ==  self.obs['put_contr'][1]:
          if self.obs['rond'] == self.obs['num_rounds']:
            self.decide()
            return None
          else:
            self.obs['rond']+=1
            self.hand_start = 10
            if self.debug and self.obs['rond'] <= self.obs['num_rounds']: print('going into rond ', self.obs['rond'])
            self.obs['com_card'][self.obs['rond']-2] = self.deck_flop[0]
            self.deck_flop = np.delete(self.deck_flop, [0])
            if self.debug: print('flop = ', self.obs['com_card'])
            self.obs['com_card_shown'] += 1
            return -1



    # if self.obs['put_contr'][0] !=  self.obs['put_contr'][1]:
    #   self.counter+=1
    #   agent_id = np.argmin(self.obs['put_contr'])
    #   # self.obs['turn'] = agent_id
    #   self.last_actor = agent_id
    #   self.hand_start= -1
    #   return agent_id

    # if self.obs['put_contr'][0] ==  self.obs['put_contr'][1] and self.hand_start!=5:
    #   self.counter+=1
    #   self.decide()
    #   return None
##########################################################################################
  def player_read_action(self, agent_id, action):
    if -1 in np.array(self.check_options(agent_id)) - np.array(action):
      print("illegal action selected", action )
      raise ValueError('not legal action')
    if np.sum(action) != 1 or 1 not in action or len(action)!=7:
      if self.debug: print(action)
      raise ValueError('action not in the right format')

    # options = (fold, check, call, hput, put, oput, all_in)
    else:
      r = self.obs['rond'] -1
      if action == [1,0,0,0,0,0,0]:
        return 0
      elif action==[0,1,0,0,0,0,0]:
        self.obs['player_hist'][agent_id][r][0] +=1
        return 0
      elif action==[0,0,1,0,0,0,0]:
        call_amount = self.obs['put_contr'][1 - agent_id]-self.obs['put_contr'][agent_id]
        self.obs['player_hist'][agent_id][r][1] +=1
        return call_amount
      elif action==[0,0,0,1,0,0,0]:
        half_put = (self.obs['put_contr'][1 - agent_id]-self.obs['put_contr'][agent_id] ) + 1/2 *self.obs['put']
        self.obs['player_hist'][agent_id][r][2] +=1
        return half_put
      elif action==[0,0,0,0,1,0,0]:
        put = (self.obs['put_contr'][1 - agent_id]-self.obs['put_contr'][agent_id] ) + self.obs['put']
        self.obs['player_hist'][agent_id][r][3] +=1
        return put
      elif action==[0,0,0,0,0,1,0]:
        over = (self.obs['put_contr'][1 - agent_id]-self.obs['put_contr'][agent_id] ) + 1.5 * self.obs['put']
        self.obs['player_hist'][agent_id][r][4] +=1
        return over
      elif action == [0,0,0,0,0,0,1]:
        all_in_amount = self.obs['stacks'][agent_id]
        self.obs['player_hist'][agent_id][r][5] +=1
        return all_in_amount
##########################################################################################
  def player_obs(self, agent_id):
    if agent_id is not None:
      player_observation = self.obs
      player_observation['player_id'] = agent_id
      return player_observation
    else:
       return None
##########################################################################################
  def step(self, ACTION):
    agent_id = self.agent_id
      

    if agent_id is not None:   # print(self.player_obs(agent_id)) 

      action = ACTION
      # if self.debug: print(agent_id, " chose ", action)
      if action == [0,0,0,0,0,0,1]:
        self.all_in(agent_id)
      elif action == [1,0,0,0,0,0,0]:
        self.folded=1
        self.hand_start=-1 #added this here
        amount = self.player_read_action(agent_id,action)
        self.update_obs(agent_id, amount)
      elif action == [0,1,0,0,0,0,0]:
        amount = self.player_read_action(agent_id,action)
        self.update_obs(agent_id, amount)
        if self.debug: print('player {} checks'.format(agent_id))
      elif action == [0,0,1,0,0,0,0]:
        amount = self.player_read_action(agent_id,action)
        amount = np.min([amount, self.obs['stacks'][agent_id]])
        self.update_obs(agent_id, amount)
        if self.debug: print('player {} calls amount {}, stack/contr/put = {}/{}/{}'.format(agent_id, amount, self.obs["stacks"][agent_id], self.obs["put_contr"][agent_id], self.obs["put"]))

      elif action == [0,0,0,1,0,0,0]:
        amount = self.player_read_action(agent_id,action)
        # amount = np.min([amount, self.obs['stacks'][agent_id],self.obs['stacks'][1-agent_id]])
        amount = np.min([amount, self.obs['stacks'][1-agent_id]])

        self.update_obs(agent_id, amount)
        if self.debug: print('player {} bets half-put, amount {}, stack/contr/put = {}/{}/{}'.format(agent_id, amount, self.obs["stacks"][agent_id], self.obs["put_contr"][agent_id], self.obs["put"]))

      elif action == [0,0,0,0,1,0,0]:
        amount = self.player_read_action(agent_id,action)
        amount = np.min([amount, self.obs['stacks'][1-agent_id]])
        self.update_obs(agent_id, amount)
        if self.debug: print('player {} bets put, amount {}, stack/contr/put = {}/{}/{}'.format(agent_id, amount, self.obs["stacks"][agent_id], self.obs["put_contr"][agent_id], self.obs["put"]))
      
      elif action == [0,0,0,0,0,1,0]:
        amount = self.player_read_action(agent_id,action)
        amount = np.min([amount, self.obs['stacks'][1-agent_id]])
        self.update_obs(agent_id, amount)
        if self.debug: print('player {} bets 1.5 put, amount {}, stack/contr/put = {}/{}/{}'.format(agent_id, amount, self.obs["stacks"][agent_id], self.obs["put_contr"][agent_id], self.obs["put"]))

    self.agent_id = self.comp_turn()
    #Fake Stepping
    while self.agent_id == -1:
      self.agent_id = self.comp_turn()
    
    self.obs['agent_id']=self.agent_id

    if self.agent_id is not None:
      if self.agent_id == 0:
        self.obs['player0_options']=self.check_options(self.agent_id)
        # if self.debug: print('player {} options are {}'.format(0, self.obs['player0_options']))
        options = self.obs['player0_options']
      else:
        self.obs['player1_options']=self.check_options(self.agent_id)
        # if self.debug: print('player {} options are {}'.format(1, self.obs['player1_options']))
        options = self.obs['player1_options']


    return (self.player_obs(self.agent_id), self.rewards, self.last_action)
##########################################################################################
  def decide(self):
      
    if self.use_conv == -1:
        maxp = [0, 0]
        for i in self.obs['com_card']:
            if self.obs['cards'][0] == i:
                maxp[0] = max(maxp[0],i)
            if self.obs['cards'][1] == i:
                maxp[1] = max(maxp[1],i)
        if max(maxp) > 0:
            winner = np.argmax(maxp)
            if self.debug: print(maxp, 'maxp')
            if self.debug: print(winner, 'winning with pair of ', max(maxp))
        else:
          winner = np.argmax(self.obs['cards'])
          if self.debug: print(winner, 'winning with highcard ', self.obs['cards'][winner])
        # print('PLAYER {x} WON {y} DOLLARS!'.format(x=winner, y=self.obs['put']), ' counter= ', self.counter)
        if self.debug: print('flop is: ', self.obs['com_card'])
        if self.debug: print('PLAYER {x} HAS {xc}, PLAYER {y} HAS {yc}'.format(x=0, xc=self.obs['cards'][0], y=1,yc=self.obs['cards'][1] ))
        if self.debug: print('PLAYER {x} WON {y} DOLLARS!'.format(x=winner, y=self.obs['put']))
    else:
      winner = self.use_conv

    self.obs['stacks'][winner] += self.obs['put']
    self.rewards = self.obs['stacks'] - self.obs['initial_stacks'] 
    self.obs['put']=0
    self.obs['dealer'] = 1 - self.obs['dealer']
    self.obs['put_contr']= np.array([0,0],dtype=float)
    self.obs['cards']=np.array([0,0])
    # print('winner is ', winner)
    # print('after hand', self.obs)
    self.obs['stage'] = 'ppf'
    self.hand_start=1
    self.player_all_in=0
    self.hand_ended = 1
    # if self.debug: print('*********      *********     *********      *********     *********      *********     *********      ********   **********      *********     *********      *********')


##########################################################################################
  def fold(self, agent_id):
    winner = 1 - agent_id
    # print('PLAYER {x} Folds, player {y} WON  DOLLARS!'.format(x=winner, y=self.obs['put']), ' counter= ', self.counter)
    if self.debug: print('PLAYER {x} Folds, player {y} WON {A} DOLLARS!'.format(x=agent_id, y= winner, A=self.obs['put']))

    self.obs['stacks'][winner] += self.obs['put']
    self.rewards = self.obs['stacks'] - self.obs['initial_stacks'] 
    self.obs['put']=0
    self.obs['dealer'] = 1 - self.obs['dealer']
    self.obs['put_contr']= np.array([0,0],dtype=float)
    self.obs['cards']=np.array([0,0])
    # print('winner is ', winner)
    # print('after hand', self.obs)
    self.obs['stage'] = 'ppf'
    self.hand_start=1
    self.player_all_in=0
    self.hand_ended = 1
    # self.rewards = [0,0]
    # if self.debug: print('*********      *********     *********      *********     *********      *********     *********      ********   **********      *********     *********      *********')


##########################################################################################
  def render(self, debug=False):
    space='    '
    if debug:
      print(pd.DataFrame(data= [[self.obs['stage'], self.obs['dealer'], self.obs['cards'],self.obs['stacks'],self.obs['put_contr'],self.obs['last_bet'],self.obs['player0_options'], self.obs['player1_options']]],columns=['stage','dealer','cards','stakes','contr','last_bet','player0_options','player1_options']))
    elif self.i==0:
      self.i=1
      print("-------Player0-------",space,"-------Player1-------")
    if not debug:

      print("stack,  card, put_cr, /put/, put_cr,  card, stack")
      print(self.obs['stacks'][0],space, self.obs['cards'][0],space, self.obs['put_contr'][0],space,'/',self.obs['put'],'/',space,self.obs['put_contr'][1],space, self.obs['cards'][1],space, self.obs['stacks'][1])